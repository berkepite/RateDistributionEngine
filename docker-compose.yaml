name: engine-cluster
services:
  rate-distribution-engine:
    image: berkepite/rate-distribution-engine
    container_name: rate-distribution-engine
    networks:
      - network
    volumes:
      - logs_volume:/app/logs
      - ./email-groups.txt:/app/email-groups.txt:ro
      - ./subscribers:/app/subscribers
      - ./rate_calculators:/app/rate_calculators
      - ./application-config.yaml:/app/application-config.yaml:ro
      - ./rates.csv:/app/rates.csv:ro
    depends_on:
      rest-platform:
        condition: service_started
      tcp-platform:
        condition: service_started
      #      kafka:
      #        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      TZ: Europe/Istanbul # timezone
      SPRING_PROFILES_ACTIVE: dev
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      APP_EMAIL_USERNAME: ${APP_EMAIL_USERNAME}
      APP_EMAIL_PASSWORD: ${APP_EMAIL_PASSWORD}
      APP_EMAIL_ENABLED: false
      APP_EMAIL_GROUPS: /app/email-groups.txt
      APP_RATE_CALCULATION_STRATEGY: JAVASCRIPT
      APP_RATE_CALCULATOR_PATH: /app/rate_calculators/js-calc.mjs
      APP_RATES: /app/rates.csv
      TCP_SUBSCRIBER_ENABLED: true
      REST_SUBSCRIBER_ENABLED: true
    ports:
      - "3000:8080"

  tcp-platform:
    image: luieitalian/tcp-platform-standalone
    container_name: tcp-platform-standalone
    volumes:
      - ./initial_data_tcp.json:/app/initial_data.json:ro
    networks:
      - network
    environment:
      TZ: Europe/Istanbul # timezone
      TCP_SERVER_USER: client
      TCP_SERVER_PASSWORD: 2345
      TCP_SIMULATOR_UPDATE_INTERVAL: 2000
      TCP_SERVER_TOTAL_STREAMS: 1000
      TCP_SERVER_STREAM_INTERVAL: 2100
      APPLICATION_PROFILE: prod
      SIMULATOR_ENABLED: true
      SIMULATOR_INTENSITY: med
    ports:
      - "2000:8080"

  rest-platform:
    image: luieitalian/rest-platform
    container_name: rest-platform
    volumes:
      - ./initial_data_rest.json:/app/initial_data.json:ro
    networks:
      - network
    environment:
      TZ: Europe/Istanbul # timezone
      REST_SERVER_USER: client
      REST_SERVER_PASSWORD: 1234
      REST_REQUEST_LIMIT: 1000
      SPRING_PROFILES_ACTIVE: prod
      SIMULATOR_ENABLED: true
      SIMULATOR_INTENSITY: med
    ports:
      - "1000:8080"

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - network
    ports:
      - "6379:6379"

#  postgres:
#    image: postgres:latest
#    container_name: postgres
#    networks:
#      - network
#    environment:
#      POSTGRES_USER: debug_user
#      POSTGRES_PASSWORD: 1234
#      POSTGRES_DB: backend
#
#  kafka:
#    image: confluentinc/cp-kafka
#    container_name: kafka
#    networks:
#      - network
#    healthcheck:
#      test: [ "CMD", "sh", "-c", "nc -z localhost 9092" ]
#      interval: 10s
#      retries: 5
#      timeout: 10s
#      start_period: 10s
#    environment:
#      # Cluster ID (unique identifier for Kafka cluster)
#      CLUSTER_ID: qlWgb1R5R4GHgldQpgTcTQ
#      # Kafka listeners (broker and controller)
#      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
#      # Advertised listeners (used by clients to connect)
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      # Unique broker ID
#      KAFKA_BROKER_ID: 1
#      # Replication factor settings
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      # Enable auto topic creation
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
#      # Kafka process roles (broker and controller)
#      KAFKA_PROCESS_ROLES: broker,controller
#      # Node ID (for KRaft mode)
#      KAFKA_NODE_ID: 1
#      # Controller quorum voters (list of controllers)
#      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
#      # Listener security protocol mapping
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
#      # Define controller listener
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      # Define inter-broker listener name
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#
#  opensearch-consumer:
#    image: luieitalian/opensearch-consumer
#    container_name: opensearch-consumer
#    networks:
#      - network
#    depends_on:
#      opensearch:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#    environment:
#      OPENSEARCH_USERNAME: admin
#      OPENSEARCH_PASSWORD: Aloha.32bit
#      OPENSEARCH_HOST: opensearch
#      OPENSEARCH_PORT: 9200
#
#  postgres-consumer:
#    image: luieitalian/postgres-consumer
#    container_name: postgres-consumer
#    networks:
#      - network
#    depends_on:
#      postgres:
#        condition: service_started
#      kafka:
#        condition: service_healthy
#    environment:
#      POSTGRES_USER: debug_user
#      POSTGRES_PASSWORD: 1234
#
#  opensearch:
#    image: opensearchproject/opensearch:latest
#    container_name: opensearch
#    networks:
#      - network
#    healthcheck:
#      test: [ "CMD", "curl", "-X", "GET", "https://opensearch:9200", "-ku", "admin:Aloha.32bit" ]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#      start_period: 20s
#    environment:
#      discovery.type: single-node
#      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
#      bootstrap.memory_lock: true
#      OPENSEARCH_INITIAL_ADMIN_PASSWORD: "Aloha.32bit"
#
#  opensearch-dashboards:
#    image: opensearchproject/opensearch-dashboards:latest
#    container_name: opensearch-dashboards
#    ports:
#      - "5601:5601" # OpenSearch Dashboards web arayüzü
#    networks:
#      - network
#    depends_on:
#      opensearch:
#        condition: service_healthy
#    environment:
#      - OPENSEARCH_HOSTS=["https://opensearch:9200"]
#      - SERVER_HOST=0.0.0.0
#      - OPENSEARCH_USERNAME=admin
#      - OPENSEARCH_PASSWORD=Aloha.32bit
#
#  filebeat:
#    image: docker.elastic.co/beats/filebeat-oss:7.12.1
#    container_name: filebeat
#    user: root
#    volumes:
#      - ./filebeat.yaml:/usr/share/filebeat/filebeat.yaml
#      - logs_volume:/app/logs:ro
#    command: "filebeat -e -strict.perms=false"
#    networks:
#      - network
#    depends_on:
#      - logstash
#
#  logstash:
#    image: opensearchproject/logstash-oss-with-opensearch-output-plugin:latest
#    container_name: logstash
#    networks:
#      - network
#    volumes:
#      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#    depends_on:
#      opensearch:
#        condition: service_healthy
#    environment:
#      LS_JAVA_OPTS: "-Xms256m -Xmx256m"

networks:
  network:
    driver: bridge

volumes:
  logs_volume:
